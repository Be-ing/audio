/* automatically generated by rust-bindgen 0.58.1 */

extern "C" {
    pub fn pa_get_library_version() -> *const ::std::os::raw::c_char;
}
pub const PA_SAMPLE_U8: pa_sample_format = 0;
pub const PA_SAMPLE_ALAW: pa_sample_format = 1;
pub const PA_SAMPLE_ULAW: pa_sample_format = 2;
pub const PA_SAMPLE_S16LE: pa_sample_format = 3;
pub const PA_SAMPLE_S16BE: pa_sample_format = 4;
pub const PA_SAMPLE_FLOAT32LE: pa_sample_format = 5;
pub const PA_SAMPLE_FLOAT32BE: pa_sample_format = 6;
pub const PA_SAMPLE_S32LE: pa_sample_format = 7;
pub const PA_SAMPLE_S32BE: pa_sample_format = 8;
pub const PA_SAMPLE_S24LE: pa_sample_format = 9;
pub const PA_SAMPLE_S24BE: pa_sample_format = 10;
pub const PA_SAMPLE_S24_32LE: pa_sample_format = 11;
pub const PA_SAMPLE_S24_32BE: pa_sample_format = 12;
pub const PA_SAMPLE_MAX: pa_sample_format = 13;
pub const PA_SAMPLE_INVALID: pa_sample_format = -1;
pub type pa_sample_format = ::std::os::raw::c_int;
pub use self::pa_sample_format as pa_sample_format_t;
#[repr(C)]
pub struct pa_sample_spec {
    pub format: pa_sample_format_t,
    pub rate: u32,
    pub channels: u8,
}
pub type pa_usec_t = u64;
extern "C" {
    pub fn pa_bytes_per_second(spec: *const pa_sample_spec) -> usize;
}
extern "C" {
    pub fn pa_frame_size(spec: *const pa_sample_spec) -> usize;
}
extern "C" {
    pub fn pa_sample_size(spec: *const pa_sample_spec) -> usize;
}
extern "C" {
    pub fn pa_sample_size_of_format(f: pa_sample_format_t) -> usize;
}
extern "C" {
    pub fn pa_bytes_to_usec(length: u64, spec: *const pa_sample_spec) -> pa_usec_t;
}
extern "C" {
    pub fn pa_usec_to_bytes(t: pa_usec_t, spec: *const pa_sample_spec) -> usize;
}
extern "C" {
    pub fn pa_sample_spec_init(spec: *mut pa_sample_spec) -> *mut pa_sample_spec;
}
extern "C" {
    pub fn pa_sample_format_valid(format: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_sample_rate_valid(rate: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_channels_valid(channels: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_sample_spec_valid(spec: *const pa_sample_spec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_sample_spec_equal(
        a: *const pa_sample_spec,
        b: *const pa_sample_spec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_sample_format_to_string(f: pa_sample_format_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_parse_sample_format(format: *const ::std::os::raw::c_char) -> pa_sample_format_t;
}
extern "C" {
    pub fn pa_sample_spec_snprint(
        s: *mut ::std::os::raw::c_char,
        l: usize,
        spec: *const pa_sample_spec,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_bytes_snprint(
        s: *mut ::std::os::raw::c_char,
        l: usize,
        v: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_sample_format_is_le(f: pa_sample_format_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_sample_format_is_be(f: pa_sample_format_t) -> ::std::os::raw::c_int;
}
pub const PA_CONTEXT_UNCONNECTED: pa_context_state = 0;
pub const PA_CONTEXT_CONNECTING: pa_context_state = 1;
pub const PA_CONTEXT_AUTHORIZING: pa_context_state = 2;
pub const PA_CONTEXT_SETTING_NAME: pa_context_state = 3;
pub const PA_CONTEXT_READY: pa_context_state = 4;
pub const PA_CONTEXT_FAILED: pa_context_state = 5;
pub const PA_CONTEXT_TERMINATED: pa_context_state = 6;
pub type pa_context_state = ::std::os::raw::c_uint;
pub use self::pa_context_state as pa_context_state_t;
pub const PA_STREAM_UNCONNECTED: pa_stream_state = 0;
pub const PA_STREAM_CREATING: pa_stream_state = 1;
pub const PA_STREAM_READY: pa_stream_state = 2;
pub const PA_STREAM_FAILED: pa_stream_state = 3;
pub const PA_STREAM_TERMINATED: pa_stream_state = 4;
pub type pa_stream_state = ::std::os::raw::c_uint;
pub use self::pa_stream_state as pa_stream_state_t;
pub const PA_OPERATION_RUNNING: pa_operation_state = 0;
pub const PA_OPERATION_DONE: pa_operation_state = 1;
pub const PA_OPERATION_CANCELLED: pa_operation_state = 2;
pub type pa_operation_state = ::std::os::raw::c_uint;
pub use self::pa_operation_state as pa_operation_state_t;
pub const PA_CONTEXT_NOFLAGS: pa_context_flags = 0;
pub const PA_CONTEXT_NOAUTOSPAWN: pa_context_flags = 1;
pub const PA_CONTEXT_NOFAIL: pa_context_flags = 2;
pub type pa_context_flags = ::std::os::raw::c_uint;
pub use self::pa_context_flags as pa_context_flags_t;
pub const PA_DIRECTION_OUTPUT: pa_direction = 1;
pub const PA_DIRECTION_INPUT: pa_direction = 2;
pub type pa_direction = ::std::os::raw::c_uint;
pub use self::pa_direction as pa_direction_t;
pub const PA_DEVICE_TYPE_SINK: pa_device_type = 0;
pub const PA_DEVICE_TYPE_SOURCE: pa_device_type = 1;
pub type pa_device_type = ::std::os::raw::c_uint;
pub use self::pa_device_type as pa_device_type_t;
pub const PA_STREAM_NODIRECTION: pa_stream_direction = 0;
pub const PA_STREAM_PLAYBACK: pa_stream_direction = 1;
pub const PA_STREAM_RECORD: pa_stream_direction = 2;
pub const PA_STREAM_UPLOAD: pa_stream_direction = 3;
pub type pa_stream_direction = ::std::os::raw::c_uint;
pub use self::pa_stream_direction as pa_stream_direction_t;
pub const PA_STREAM_NOFLAGS: pa_stream_flags = 0;
pub const PA_STREAM_START_CORKED: pa_stream_flags = 1;
pub const PA_STREAM_INTERPOLATE_TIMING: pa_stream_flags = 2;
pub const PA_STREAM_NOT_MONOTONIC: pa_stream_flags = 4;
pub const PA_STREAM_AUTO_TIMING_UPDATE: pa_stream_flags = 8;
pub const PA_STREAM_NO_REMAP_CHANNELS: pa_stream_flags = 16;
pub const PA_STREAM_NO_REMIX_CHANNELS: pa_stream_flags = 32;
pub const PA_STREAM_FIX_FORMAT: pa_stream_flags = 64;
pub const PA_STREAM_FIX_RATE: pa_stream_flags = 128;
pub const PA_STREAM_FIX_CHANNELS: pa_stream_flags = 256;
pub const PA_STREAM_DONT_MOVE: pa_stream_flags = 512;
pub const PA_STREAM_VARIABLE_RATE: pa_stream_flags = 1024;
pub const PA_STREAM_PEAK_DETECT: pa_stream_flags = 2048;
pub const PA_STREAM_START_MUTED: pa_stream_flags = 4096;
pub const PA_STREAM_ADJUST_LATENCY: pa_stream_flags = 8192;
pub const PA_STREAM_EARLY_REQUESTS: pa_stream_flags = 16384;
pub const PA_STREAM_DONT_INHIBIT_AUTO_SUSPEND: pa_stream_flags = 32768;
pub const PA_STREAM_START_UNMUTED: pa_stream_flags = 65536;
pub const PA_STREAM_FAIL_ON_SUSPEND: pa_stream_flags = 131072;
pub const PA_STREAM_RELATIVE_VOLUME: pa_stream_flags = 262144;
pub const PA_STREAM_PASSTHROUGH: pa_stream_flags = 524288;
pub type pa_stream_flags = ::std::os::raw::c_uint;
pub use self::pa_stream_flags as pa_stream_flags_t;
#[repr(C)]
pub struct pa_buffer_attr {
    pub maxlength: u32,
    pub tlength: u32,
    pub prebuf: u32,
    pub minreq: u32,
    pub fragsize: u32,
}
pub const PA_OK: pa_error_code = 0;
pub const PA_ERR_ACCESS: pa_error_code = 1;
pub const PA_ERR_COMMAND: pa_error_code = 2;
pub const PA_ERR_INVALID: pa_error_code = 3;
pub const PA_ERR_EXIST: pa_error_code = 4;
pub const PA_ERR_NOENTITY: pa_error_code = 5;
pub const PA_ERR_CONNECTIONREFUSED: pa_error_code = 6;
pub const PA_ERR_PROTOCOL: pa_error_code = 7;
pub const PA_ERR_TIMEOUT: pa_error_code = 8;
pub const PA_ERR_AUTHKEY: pa_error_code = 9;
pub const PA_ERR_INTERNAL: pa_error_code = 10;
pub const PA_ERR_CONNECTIONTERMINATED: pa_error_code = 11;
pub const PA_ERR_KILLED: pa_error_code = 12;
pub const PA_ERR_INVALIDSERVER: pa_error_code = 13;
pub const PA_ERR_MODINITFAILED: pa_error_code = 14;
pub const PA_ERR_BADSTATE: pa_error_code = 15;
pub const PA_ERR_NODATA: pa_error_code = 16;
pub const PA_ERR_VERSION: pa_error_code = 17;
pub const PA_ERR_TOOLARGE: pa_error_code = 18;
pub const PA_ERR_NOTSUPPORTED: pa_error_code = 19;
pub const PA_ERR_UNKNOWN: pa_error_code = 20;
pub const PA_ERR_NOEXTENSION: pa_error_code = 21;
pub const PA_ERR_OBSOLETE: pa_error_code = 22;
pub const PA_ERR_NOTIMPLEMENTED: pa_error_code = 23;
pub const PA_ERR_FORKED: pa_error_code = 24;
pub const PA_ERR_IO: pa_error_code = 25;
pub const PA_ERR_BUSY: pa_error_code = 26;
pub const PA_ERR_MAX: pa_error_code = 27;
pub type pa_error_code = ::std::os::raw::c_uint;
pub use self::pa_error_code as pa_error_code_t;
pub const PA_SUBSCRIPTION_MASK_NULL: pa_subscription_mask = 0;
pub const PA_SUBSCRIPTION_MASK_SINK: pa_subscription_mask = 1;
pub const PA_SUBSCRIPTION_MASK_SOURCE: pa_subscription_mask = 2;
pub const PA_SUBSCRIPTION_MASK_SINK_INPUT: pa_subscription_mask = 4;
pub const PA_SUBSCRIPTION_MASK_SOURCE_OUTPUT: pa_subscription_mask = 8;
pub const PA_SUBSCRIPTION_MASK_MODULE: pa_subscription_mask = 16;
pub const PA_SUBSCRIPTION_MASK_CLIENT: pa_subscription_mask = 32;
pub const PA_SUBSCRIPTION_MASK_SAMPLE_CACHE: pa_subscription_mask = 64;
pub const PA_SUBSCRIPTION_MASK_SERVER: pa_subscription_mask = 128;
pub const PA_SUBSCRIPTION_MASK_AUTOLOAD: pa_subscription_mask = 256;
pub const PA_SUBSCRIPTION_MASK_CARD: pa_subscription_mask = 512;
pub const PA_SUBSCRIPTION_MASK_ALL: pa_subscription_mask = 767;
pub type pa_subscription_mask = ::std::os::raw::c_uint;
pub use self::pa_subscription_mask as pa_subscription_mask_t;
pub const PA_SUBSCRIPTION_EVENT_SINK: pa_subscription_event_type = 0;
pub const PA_SUBSCRIPTION_EVENT_SOURCE: pa_subscription_event_type = 1;
pub const PA_SUBSCRIPTION_EVENT_SINK_INPUT: pa_subscription_event_type = 2;
pub const PA_SUBSCRIPTION_EVENT_SOURCE_OUTPUT: pa_subscription_event_type = 3;
pub const PA_SUBSCRIPTION_EVENT_MODULE: pa_subscription_event_type = 4;
pub const PA_SUBSCRIPTION_EVENT_CLIENT: pa_subscription_event_type = 5;
pub const PA_SUBSCRIPTION_EVENT_SAMPLE_CACHE: pa_subscription_event_type = 6;
pub const PA_SUBSCRIPTION_EVENT_SERVER: pa_subscription_event_type = 7;
pub const PA_SUBSCRIPTION_EVENT_AUTOLOAD: pa_subscription_event_type = 8;
pub const PA_SUBSCRIPTION_EVENT_CARD: pa_subscription_event_type = 9;
pub const PA_SUBSCRIPTION_EVENT_FACILITY_MASK: pa_subscription_event_type = 15;
pub const PA_SUBSCRIPTION_EVENT_NEW: pa_subscription_event_type = 0;
pub const PA_SUBSCRIPTION_EVENT_CHANGE: pa_subscription_event_type = 16;
pub const PA_SUBSCRIPTION_EVENT_REMOVE: pa_subscription_event_type = 32;
pub const PA_SUBSCRIPTION_EVENT_TYPE_MASK: pa_subscription_event_type = 48;
pub type pa_subscription_event_type = ::std::os::raw::c_uint;
pub use self::pa_subscription_event_type as pa_subscription_event_type_t;
#[repr(C)]
pub struct pa_timing_info {
    pub timestamp: timeval,
    pub synchronized_clocks: ::std::os::raw::c_int,
    pub sink_usec: pa_usec_t,
    pub source_usec: pa_usec_t,
    pub transport_usec: pa_usec_t,
    pub playing: ::std::os::raw::c_int,
    pub write_index_corrupt: ::std::os::raw::c_int,
    pub write_index: i64,
    pub read_index_corrupt: ::std::os::raw::c_int,
    pub read_index: i64,
    pub configured_sink_usec: pa_usec_t,
    pub configured_source_usec: pa_usec_t,
    pub since_underrun: i64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pa_spawn_api {
    pub prefork: ::std::option::Option<unsafe extern "C" fn()>,
    pub postfork: ::std::option::Option<unsafe extern "C" fn()>,
    pub atfork: ::std::option::Option<unsafe extern "C" fn()>,
}
pub const PA_SEEK_RELATIVE: pa_seek_mode = 0;
pub const PA_SEEK_ABSOLUTE: pa_seek_mode = 1;
pub const PA_SEEK_RELATIVE_ON_READ: pa_seek_mode = 2;
pub const PA_SEEK_RELATIVE_END: pa_seek_mode = 3;
pub type pa_seek_mode = ::std::os::raw::c_uint;
pub use self::pa_seek_mode as pa_seek_mode_t;
pub const PA_SINK_NOFLAGS: pa_sink_flags = 0;
pub const PA_SINK_HW_VOLUME_CTRL: pa_sink_flags = 1;
pub const PA_SINK_LATENCY: pa_sink_flags = 2;
pub const PA_SINK_HARDWARE: pa_sink_flags = 4;
pub const PA_SINK_NETWORK: pa_sink_flags = 8;
pub const PA_SINK_HW_MUTE_CTRL: pa_sink_flags = 16;
pub const PA_SINK_DECIBEL_VOLUME: pa_sink_flags = 32;
pub const PA_SINK_FLAT_VOLUME: pa_sink_flags = 64;
pub const PA_SINK_DYNAMIC_LATENCY: pa_sink_flags = 128;
pub const PA_SINK_SET_FORMATS: pa_sink_flags = 256;
pub type pa_sink_flags = ::std::os::raw::c_uint;
pub use self::pa_sink_flags as pa_sink_flags_t;
pub const PA_SINK_INVALID_STATE: pa_sink_state = -1;
pub const PA_SINK_RUNNING: pa_sink_state = 0;
pub const PA_SINK_IDLE: pa_sink_state = 1;
pub const PA_SINK_SUSPENDED: pa_sink_state = 2;
pub const PA_SINK_INIT: pa_sink_state = -2;
pub const PA_SINK_UNLINKED: pa_sink_state = -3;
pub type pa_sink_state = ::std::os::raw::c_int;
pub use self::pa_sink_state as pa_sink_state_t;
pub const PA_SOURCE_NOFLAGS: pa_source_flags = 0;
pub const PA_SOURCE_HW_VOLUME_CTRL: pa_source_flags = 1;
pub const PA_SOURCE_LATENCY: pa_source_flags = 2;
pub const PA_SOURCE_HARDWARE: pa_source_flags = 4;
pub const PA_SOURCE_NETWORK: pa_source_flags = 8;
pub const PA_SOURCE_HW_MUTE_CTRL: pa_source_flags = 16;
pub const PA_SOURCE_DECIBEL_VOLUME: pa_source_flags = 32;
pub const PA_SOURCE_DYNAMIC_LATENCY: pa_source_flags = 64;
pub const PA_SOURCE_FLAT_VOLUME: pa_source_flags = 128;
pub type pa_source_flags = ::std::os::raw::c_uint;
pub use self::pa_source_flags as pa_source_flags_t;
pub const PA_SOURCE_INVALID_STATE: pa_source_state = -1;
pub const PA_SOURCE_RUNNING: pa_source_state = 0;
pub const PA_SOURCE_IDLE: pa_source_state = 1;
pub const PA_SOURCE_SUSPENDED: pa_source_state = 2;
pub const PA_SOURCE_INIT: pa_source_state = -2;
pub const PA_SOURCE_UNLINKED: pa_source_state = -3;
pub type pa_source_state = ::std::os::raw::c_int;
pub use self::pa_source_state as pa_source_state_t;
pub type pa_free_cb_t = ::std::option::Option<unsafe extern "C" fn(p: *mut ::std::os::raw::c_void)>;
pub const PA_PORT_AVAILABLE_UNKNOWN: pa_port_available = 0;
pub const PA_PORT_AVAILABLE_NO: pa_port_available = 1;
pub const PA_PORT_AVAILABLE_YES: pa_port_available = 2;
pub type pa_port_available = ::std::os::raw::c_uint;
pub use self::pa_port_available as pa_port_available_t;
pub const PA_DEVICE_PORT_TYPE_UNKNOWN: pa_device_port_type = 0;
pub const PA_DEVICE_PORT_TYPE_AUX: pa_device_port_type = 1;
pub const PA_DEVICE_PORT_TYPE_SPEAKER: pa_device_port_type = 2;
pub const PA_DEVICE_PORT_TYPE_HEADPHONES: pa_device_port_type = 3;
pub const PA_DEVICE_PORT_TYPE_LINE: pa_device_port_type = 4;
pub const PA_DEVICE_PORT_TYPE_MIC: pa_device_port_type = 5;
pub const PA_DEVICE_PORT_TYPE_HEADSET: pa_device_port_type = 6;
pub const PA_DEVICE_PORT_TYPE_HANDSET: pa_device_port_type = 7;
pub const PA_DEVICE_PORT_TYPE_EARPIECE: pa_device_port_type = 8;
pub const PA_DEVICE_PORT_TYPE_SPDIF: pa_device_port_type = 9;
pub const PA_DEVICE_PORT_TYPE_HDMI: pa_device_port_type = 10;
pub const PA_DEVICE_PORT_TYPE_TV: pa_device_port_type = 11;
pub const PA_DEVICE_PORT_TYPE_RADIO: pa_device_port_type = 12;
pub const PA_DEVICE_PORT_TYPE_VIDEO: pa_device_port_type = 13;
pub const PA_DEVICE_PORT_TYPE_USB: pa_device_port_type = 14;
pub const PA_DEVICE_PORT_TYPE_BLUETOOTH: pa_device_port_type = 15;
pub const PA_DEVICE_PORT_TYPE_PORTABLE: pa_device_port_type = 16;
pub const PA_DEVICE_PORT_TYPE_HANDSFREE: pa_device_port_type = 17;
pub const PA_DEVICE_PORT_TYPE_CAR: pa_device_port_type = 18;
pub const PA_DEVICE_PORT_TYPE_HIFI: pa_device_port_type = 19;
pub const PA_DEVICE_PORT_TYPE_PHONE: pa_device_port_type = 20;
pub const PA_DEVICE_PORT_TYPE_NETWORK: pa_device_port_type = 21;
pub const PA_DEVICE_PORT_TYPE_ANALOG: pa_device_port_type = 22;
pub type pa_device_port_type = ::std::os::raw::c_uint;
pub use self::pa_device_port_type as pa_device_port_type_t;
extern "C" {
    pub fn pa_direction_valid(direction: pa_direction_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_direction_to_string(direction: pa_direction_t) -> *const ::std::os::raw::c_char;
}
pub const PA_IO_EVENT_NULL: pa_io_event_flags = 0;
pub const PA_IO_EVENT_INPUT: pa_io_event_flags = 1;
pub const PA_IO_EVENT_OUTPUT: pa_io_event_flags = 2;
pub const PA_IO_EVENT_HANGUP: pa_io_event_flags = 4;
pub const PA_IO_EVENT_ERROR: pa_io_event_flags = 8;
pub type pa_io_event_flags = ::std::os::raw::c_uint;
pub use self::pa_io_event_flags as pa_io_event_flags_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pa_io_event {
    _unused: [u8; 0],
}
pub type pa_io_event_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        ea: *mut pa_mainloop_api,
        e: *mut pa_io_event,
        fd: ::std::os::raw::c_int,
        events: pa_io_event_flags_t,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type pa_io_event_destroy_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut pa_mainloop_api,
        e: *mut pa_io_event,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pa_time_event {
    _unused: [u8; 0],
}
pub type pa_time_event_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut pa_mainloop_api,
        e: *mut pa_time_event,
        tv: *const timeval,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type pa_time_event_destroy_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut pa_mainloop_api,
        e: *mut pa_time_event,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pa_defer_event {
    _unused: [u8; 0],
}
pub type pa_defer_event_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut pa_mainloop_api,
        e: *mut pa_defer_event,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type pa_defer_event_destroy_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        a: *mut pa_mainloop_api,
        e: *mut pa_defer_event,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pa_mainloop_api {
    pub userdata: *mut ::std::os::raw::c_void,
    pub io_new: ::std::option::Option<
        unsafe extern "C" fn(
            a: *mut pa_mainloop_api,
            fd: ::std::os::raw::c_int,
            events: pa_io_event_flags_t,
            cb: pa_io_event_cb_t,
            userdata: *mut ::std::os::raw::c_void,
        ) -> *mut pa_io_event,
    >,
    pub io_enable: ::std::option::Option<
        unsafe extern "C" fn(e: *mut pa_io_event, events: pa_io_event_flags_t),
    >,
    pub io_free: ::std::option::Option<unsafe extern "C" fn(e: *mut pa_io_event)>,
    pub io_set_destroy: ::std::option::Option<
        unsafe extern "C" fn(e: *mut pa_io_event, cb: pa_io_event_destroy_cb_t),
    >,
    pub time_new: ::std::option::Option<
        unsafe extern "C" fn(
            a: *mut pa_mainloop_api,
            tv: *const timeval,
            cb: pa_time_event_cb_t,
            userdata: *mut ::std::os::raw::c_void,
        ) -> *mut pa_time_event,
    >,
    pub time_restart:
        ::std::option::Option<unsafe extern "C" fn(e: *mut pa_time_event, tv: *const timeval)>,
    pub time_free: ::std::option::Option<unsafe extern "C" fn(e: *mut pa_time_event)>,
    pub time_set_destroy: ::std::option::Option<
        unsafe extern "C" fn(e: *mut pa_time_event, cb: pa_time_event_destroy_cb_t),
    >,
    pub defer_new: ::std::option::Option<
        unsafe extern "C" fn(
            a: *mut pa_mainloop_api,
            cb: pa_defer_event_cb_t,
            userdata: *mut ::std::os::raw::c_void,
        ) -> *mut pa_defer_event,
    >,
    pub defer_enable: ::std::option::Option<
        unsafe extern "C" fn(e: *mut pa_defer_event, b: ::std::os::raw::c_int),
    >,
    pub defer_free: ::std::option::Option<unsafe extern "C" fn(e: *mut pa_defer_event)>,
    pub defer_set_destroy: ::std::option::Option<
        unsafe extern "C" fn(e: *mut pa_defer_event, cb: pa_defer_event_destroy_cb_t),
    >,
    pub quit: ::std::option::Option<
        unsafe extern "C" fn(a: *mut pa_mainloop_api, retval: ::std::os::raw::c_int),
    >,
}
extern "C" {
    pub fn pa_mainloop_api_once(
        m: *mut pa_mainloop_api,
        callback: ::std::option::Option<
            unsafe extern "C" fn(m: *mut pa_mainloop_api, userdata: *mut ::std::os::raw::c_void),
        >,
        userdata: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pa_proplist {
    _unused: [u8; 0],
}
extern "C" {
    pub fn pa_proplist_new() -> *mut pa_proplist;
}
extern "C" {
    pub fn pa_proplist_free(p: *mut pa_proplist);
}
extern "C" {
    pub fn pa_proplist_key_valid(key: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_proplist_sets(
        p: *mut pa_proplist,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_proplist_setp(
        p: *mut pa_proplist,
        pair: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_proplist_setf(
        p: *mut pa_proplist,
        key: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_proplist_set(
        p: *mut pa_proplist,
        key: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_void,
        nbytes: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_proplist_gets(
        p: *const pa_proplist,
        key: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_proplist_get(
        p: *const pa_proplist,
        key: *const ::std::os::raw::c_char,
        data: *mut *const ::std::os::raw::c_void,
        nbytes: *mut usize,
    ) -> ::std::os::raw::c_int;
}
pub const PA_UPDATE_SET: pa_update_mode = 0;
pub const PA_UPDATE_MERGE: pa_update_mode = 1;
pub const PA_UPDATE_REPLACE: pa_update_mode = 2;
pub type pa_update_mode = ::std::os::raw::c_uint;
pub use self::pa_update_mode as pa_update_mode_t;
extern "C" {
    pub fn pa_proplist_update(
        p: *mut pa_proplist,
        mode: pa_update_mode_t,
        other: *const pa_proplist,
    );
}
extern "C" {
    pub fn pa_proplist_unset(
        p: *mut pa_proplist,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_proplist_unset_many(
        p: *mut pa_proplist,
        keys: *const *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_proplist_iterate(
        p: *const pa_proplist,
        state: *mut *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_proplist_to_string(p: *const pa_proplist) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_proplist_to_string_sep(
        p: *const pa_proplist,
        sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_proplist_from_string(str_: *const ::std::os::raw::c_char) -> *mut pa_proplist;
}
extern "C" {
    pub fn pa_proplist_contains(
        p: *const pa_proplist,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_proplist_clear(p: *mut pa_proplist);
}
extern "C" {
    pub fn pa_proplist_copy(p: *const pa_proplist) -> *mut pa_proplist;
}
extern "C" {
    pub fn pa_proplist_size(p: *const pa_proplist) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn pa_proplist_isempty(p: *const pa_proplist) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_proplist_equal(a: *const pa_proplist, b: *const pa_proplist)
        -> ::std::os::raw::c_int;
}
pub const PA_CHANNEL_POSITION_INVALID: pa_channel_position = -1;
pub const PA_CHANNEL_POSITION_MONO: pa_channel_position = 0;
pub const PA_CHANNEL_POSITION_FRONT_LEFT: pa_channel_position = 1;
pub const PA_CHANNEL_POSITION_FRONT_RIGHT: pa_channel_position = 2;
pub const PA_CHANNEL_POSITION_FRONT_CENTER: pa_channel_position = 3;
pub const PA_CHANNEL_POSITION_LEFT: pa_channel_position = 1;
pub const PA_CHANNEL_POSITION_RIGHT: pa_channel_position = 2;
pub const PA_CHANNEL_POSITION_CENTER: pa_channel_position = 3;
pub const PA_CHANNEL_POSITION_REAR_CENTER: pa_channel_position = 4;
pub const PA_CHANNEL_POSITION_REAR_LEFT: pa_channel_position = 5;
pub const PA_CHANNEL_POSITION_REAR_RIGHT: pa_channel_position = 6;
pub const PA_CHANNEL_POSITION_LFE: pa_channel_position = 7;
pub const PA_CHANNEL_POSITION_SUBWOOFER: pa_channel_position = 7;
pub const PA_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER: pa_channel_position = 8;
pub const PA_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER: pa_channel_position = 9;
pub const PA_CHANNEL_POSITION_SIDE_LEFT: pa_channel_position = 10;
pub const PA_CHANNEL_POSITION_SIDE_RIGHT: pa_channel_position = 11;
pub const PA_CHANNEL_POSITION_AUX0: pa_channel_position = 12;
pub const PA_CHANNEL_POSITION_AUX1: pa_channel_position = 13;
pub const PA_CHANNEL_POSITION_AUX2: pa_channel_position = 14;
pub const PA_CHANNEL_POSITION_AUX3: pa_channel_position = 15;
pub const PA_CHANNEL_POSITION_AUX4: pa_channel_position = 16;
pub const PA_CHANNEL_POSITION_AUX5: pa_channel_position = 17;
pub const PA_CHANNEL_POSITION_AUX6: pa_channel_position = 18;
pub const PA_CHANNEL_POSITION_AUX7: pa_channel_position = 19;
pub const PA_CHANNEL_POSITION_AUX8: pa_channel_position = 20;
pub const PA_CHANNEL_POSITION_AUX9: pa_channel_position = 21;
pub const PA_CHANNEL_POSITION_AUX10: pa_channel_position = 22;
pub const PA_CHANNEL_POSITION_AUX11: pa_channel_position = 23;
pub const PA_CHANNEL_POSITION_AUX12: pa_channel_position = 24;
pub const PA_CHANNEL_POSITION_AUX13: pa_channel_position = 25;
pub const PA_CHANNEL_POSITION_AUX14: pa_channel_position = 26;
pub const PA_CHANNEL_POSITION_AUX15: pa_channel_position = 27;
pub const PA_CHANNEL_POSITION_AUX16: pa_channel_position = 28;
pub const PA_CHANNEL_POSITION_AUX17: pa_channel_position = 29;
pub const PA_CHANNEL_POSITION_AUX18: pa_channel_position = 30;
pub const PA_CHANNEL_POSITION_AUX19: pa_channel_position = 31;
pub const PA_CHANNEL_POSITION_AUX20: pa_channel_position = 32;
pub const PA_CHANNEL_POSITION_AUX21: pa_channel_position = 33;
pub const PA_CHANNEL_POSITION_AUX22: pa_channel_position = 34;
pub const PA_CHANNEL_POSITION_AUX23: pa_channel_position = 35;
pub const PA_CHANNEL_POSITION_AUX24: pa_channel_position = 36;
pub const PA_CHANNEL_POSITION_AUX25: pa_channel_position = 37;
pub const PA_CHANNEL_POSITION_AUX26: pa_channel_position = 38;
pub const PA_CHANNEL_POSITION_AUX27: pa_channel_position = 39;
pub const PA_CHANNEL_POSITION_AUX28: pa_channel_position = 40;
pub const PA_CHANNEL_POSITION_AUX29: pa_channel_position = 41;
pub const PA_CHANNEL_POSITION_AUX30: pa_channel_position = 42;
pub const PA_CHANNEL_POSITION_AUX31: pa_channel_position = 43;
pub const PA_CHANNEL_POSITION_TOP_CENTER: pa_channel_position = 44;
pub const PA_CHANNEL_POSITION_TOP_FRONT_LEFT: pa_channel_position = 45;
pub const PA_CHANNEL_POSITION_TOP_FRONT_RIGHT: pa_channel_position = 46;
pub const PA_CHANNEL_POSITION_TOP_FRONT_CENTER: pa_channel_position = 47;
pub const PA_CHANNEL_POSITION_TOP_REAR_LEFT: pa_channel_position = 48;
pub const PA_CHANNEL_POSITION_TOP_REAR_RIGHT: pa_channel_position = 49;
pub const PA_CHANNEL_POSITION_TOP_REAR_CENTER: pa_channel_position = 50;
pub const PA_CHANNEL_POSITION_MAX: pa_channel_position = 51;
pub type pa_channel_position = ::std::os::raw::c_int;
pub use self::pa_channel_position as pa_channel_position_t;
pub type pa_channel_position_mask_t = u64;
pub const PA_CHANNEL_MAP_AIFF: pa_channel_map_def = 0;
pub const PA_CHANNEL_MAP_ALSA: pa_channel_map_def = 1;
pub const PA_CHANNEL_MAP_AUX: pa_channel_map_def = 2;
pub const PA_CHANNEL_MAP_WAVEEX: pa_channel_map_def = 3;
pub const PA_CHANNEL_MAP_OSS: pa_channel_map_def = 4;
pub const PA_CHANNEL_MAP_DEF_MAX: pa_channel_map_def = 5;
pub const PA_CHANNEL_MAP_DEFAULT: pa_channel_map_def = 0;
pub type pa_channel_map_def = ::std::os::raw::c_uint;
pub use self::pa_channel_map_def as pa_channel_map_def_t;
#[repr(C)]
pub struct pa_channel_map {
    pub channels: u8,
    pub map: [pa_channel_position_t; 32usize],
}
extern "C" {
    pub fn pa_channel_map_init(m: *mut pa_channel_map) -> *mut pa_channel_map;
}
extern "C" {
    pub fn pa_channel_map_init_mono(m: *mut pa_channel_map) -> *mut pa_channel_map;
}
extern "C" {
    pub fn pa_channel_map_init_stereo(m: *mut pa_channel_map) -> *mut pa_channel_map;
}
extern "C" {
    pub fn pa_channel_map_init_auto(
        m: *mut pa_channel_map,
        channels: ::std::os::raw::c_uint,
        def: pa_channel_map_def_t,
    ) -> *mut pa_channel_map;
}
extern "C" {
    pub fn pa_channel_map_init_extend(
        m: *mut pa_channel_map,
        channels: ::std::os::raw::c_uint,
        def: pa_channel_map_def_t,
    ) -> *mut pa_channel_map;
}
extern "C" {
    pub fn pa_channel_position_to_string(
        pos: pa_channel_position_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_channel_position_from_string(
        s: *const ::std::os::raw::c_char,
    ) -> pa_channel_position_t;
}
extern "C" {
    pub fn pa_channel_position_to_pretty_string(
        pos: pa_channel_position_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_channel_map_snprint(
        s: *mut ::std::os::raw::c_char,
        l: usize,
        map: *const pa_channel_map,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_channel_map_parse(
        map: *mut pa_channel_map,
        s: *const ::std::os::raw::c_char,
    ) -> *mut pa_channel_map;
}
extern "C" {
    pub fn pa_channel_map_equal(
        a: *const pa_channel_map,
        b: *const pa_channel_map,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_channel_map_valid(map: *const pa_channel_map) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_channel_map_compatible(
        map: *const pa_channel_map,
        ss: *const pa_sample_spec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_channel_map_superset(
        a: *const pa_channel_map,
        b: *const pa_channel_map,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_channel_map_can_balance(map: *const pa_channel_map) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_channel_map_can_fade(map: *const pa_channel_map) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_channel_map_can_lfe_balance(map: *const pa_channel_map) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_channel_map_to_name(map: *const pa_channel_map) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_channel_map_to_pretty_name(
        map: *const pa_channel_map,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_channel_map_has_position(
        map: *const pa_channel_map,
        p: pa_channel_position_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_channel_map_mask(map: *const pa_channel_map) -> pa_channel_position_mask_t;
}
pub const PA_ENCODING_ANY: pa_encoding = 0;
pub const PA_ENCODING_PCM: pa_encoding = 1;
pub const PA_ENCODING_AC3_IEC61937: pa_encoding = 2;
pub const PA_ENCODING_EAC3_IEC61937: pa_encoding = 3;
pub const PA_ENCODING_MPEG_IEC61937: pa_encoding = 4;
pub const PA_ENCODING_DTS_IEC61937: pa_encoding = 5;
pub const PA_ENCODING_MPEG2_AAC_IEC61937: pa_encoding = 6;
pub const PA_ENCODING_TRUEHD_IEC61937: pa_encoding = 7;
pub const PA_ENCODING_DTSHD_IEC61937: pa_encoding = 8;
pub const PA_ENCODING_MAX: pa_encoding = 9;
pub const PA_ENCODING_INVALID: pa_encoding = -1;
pub type pa_encoding = ::std::os::raw::c_int;
pub use self::pa_encoding as pa_encoding_t;
extern "C" {
    pub fn pa_encoding_to_string(e: pa_encoding_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_encoding_from_string(encoding: *const ::std::os::raw::c_char) -> pa_encoding_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pa_format_info {
    pub encoding: pa_encoding_t,
    pub plist: *mut pa_proplist,
}
extern "C" {
    pub fn pa_format_info_new() -> *mut pa_format_info;
}
extern "C" {
    pub fn pa_format_info_copy(src: *const pa_format_info) -> *mut pa_format_info;
}
extern "C" {
    pub fn pa_format_info_free(f: *mut pa_format_info);
}
extern "C" {
    pub fn pa_format_info_valid(f: *const pa_format_info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_format_info_is_pcm(f: *const pa_format_info) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_format_info_is_compatible(
        first: *const pa_format_info,
        second: *const pa_format_info,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_format_info_snprint(
        s: *mut ::std::os::raw::c_char,
        l: usize,
        f: *const pa_format_info,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_format_info_from_string(str_: *const ::std::os::raw::c_char) -> *mut pa_format_info;
}
extern "C" {
    pub fn pa_format_info_from_sample_spec(
        ss: *const pa_sample_spec,
        map: *const pa_channel_map,
    ) -> *mut pa_format_info;
}
extern "C" {
    pub fn pa_format_info_to_sample_spec(
        f: *const pa_format_info,
        ss: *mut pa_sample_spec,
        map: *mut pa_channel_map,
    ) -> ::std::os::raw::c_int;
}
pub const PA_PROP_TYPE_INT: pa_prop_type_t = 0;
pub const PA_PROP_TYPE_INT_RANGE: pa_prop_type_t = 1;
pub const PA_PROP_TYPE_INT_ARRAY: pa_prop_type_t = 2;
pub const PA_PROP_TYPE_STRING: pa_prop_type_t = 3;
pub const PA_PROP_TYPE_STRING_ARRAY: pa_prop_type_t = 4;
pub const PA_PROP_TYPE_INVALID: pa_prop_type_t = -1;
pub type pa_prop_type_t = ::std::os::raw::c_int;
extern "C" {
    pub fn pa_format_info_get_prop_type(
        f: *const pa_format_info,
        key: *const ::std::os::raw::c_char,
    ) -> pa_prop_type_t;
}
extern "C" {
    pub fn pa_format_info_get_prop_int(
        f: *const pa_format_info,
        key: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_format_info_get_prop_int_range(
        f: *const pa_format_info,
        key: *const ::std::os::raw::c_char,
        min: *mut ::std::os::raw::c_int,
        max: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_format_info_get_prop_int_array(
        f: *const pa_format_info,
        key: *const ::std::os::raw::c_char,
        values: *mut *mut ::std::os::raw::c_int,
        n_values: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_format_info_get_prop_string(
        f: *const pa_format_info,
        key: *const ::std::os::raw::c_char,
        v: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_format_info_get_prop_string_array(
        f: *const pa_format_info,
        key: *const ::std::os::raw::c_char,
        values: *mut *mut *mut ::std::os::raw::c_char,
        n_values: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_format_info_free_string_array(
        values: *mut *mut ::std::os::raw::c_char,
        n_values: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pa_format_info_get_sample_format(
        f: *const pa_format_info,
        sf: *mut pa_sample_format_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_format_info_get_rate(
        f: *const pa_format_info,
        rate: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_format_info_get_channels(
        f: *const pa_format_info,
        channels: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_format_info_get_channel_map(
        f: *const pa_format_info,
        map: *mut pa_channel_map,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_format_info_set_prop_int(
        f: *mut pa_format_info,
        key: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pa_format_info_set_prop_int_array(
        f: *mut pa_format_info,
        key: *const ::std::os::raw::c_char,
        values: *const ::std::os::raw::c_int,
        n_values: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pa_format_info_set_prop_int_range(
        f: *mut pa_format_info,
        key: *const ::std::os::raw::c_char,
        min: ::std::os::raw::c_int,
        max: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pa_format_info_set_prop_string(
        f: *mut pa_format_info,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn pa_format_info_set_prop_string_array(
        f: *mut pa_format_info,
        key: *const ::std::os::raw::c_char,
        values: *mut *const ::std::os::raw::c_char,
        n_values: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pa_format_info_set_sample_format(f: *mut pa_format_info, sf: pa_sample_format_t);
}
extern "C" {
    pub fn pa_format_info_set_rate(f: *mut pa_format_info, rate: ::std::os::raw::c_int);
}
extern "C" {
    pub fn pa_format_info_set_channels(f: *mut pa_format_info, channels: ::std::os::raw::c_int);
}
extern "C" {
    pub fn pa_format_info_set_channel_map(f: *mut pa_format_info, map: *const pa_channel_map);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pa_operation {
    _unused: [u8; 0],
}
pub type pa_operation_notify_cb_t = ::std::option::Option<
    unsafe extern "C" fn(o: *mut pa_operation, userdata: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn pa_operation_ref(o: *mut pa_operation) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_operation_unref(o: *mut pa_operation);
}
extern "C" {
    pub fn pa_operation_cancel(o: *mut pa_operation);
}
extern "C" {
    pub fn pa_operation_get_state(o: *const pa_operation) -> pa_operation_state_t;
}
extern "C" {
    pub fn pa_operation_set_state_callback(
        o: *mut pa_operation,
        cb: pa_operation_notify_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pa_context {
    _unused: [u8; 0],
}
pub type pa_context_notify_cb_t = ::std::option::Option<
    unsafe extern "C" fn(c: *mut pa_context, userdata: *mut ::std::os::raw::c_void),
>;
pub type pa_context_success_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        c: *mut pa_context,
        success: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type pa_context_event_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        c: *mut pa_context,
        name: *const ::std::os::raw::c_char,
        p: *mut pa_proplist,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn pa_context_new(
        mainloop: *mut pa_mainloop_api,
        name: *const ::std::os::raw::c_char,
    ) -> *mut pa_context;
}
extern "C" {
    pub fn pa_context_new_with_proplist(
        mainloop: *mut pa_mainloop_api,
        name: *const ::std::os::raw::c_char,
        proplist: *const pa_proplist,
    ) -> *mut pa_context;
}
extern "C" {
    pub fn pa_context_unref(c: *mut pa_context);
}
extern "C" {
    pub fn pa_context_ref(c: *mut pa_context) -> *mut pa_context;
}
extern "C" {
    pub fn pa_context_set_state_callback(
        c: *mut pa_context,
        cb: pa_context_notify_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pa_context_set_event_callback(
        p: *mut pa_context,
        cb: pa_context_event_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pa_context_errno(c: *const pa_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_context_is_pending(c: *const pa_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_context_get_state(c: *const pa_context) -> pa_context_state_t;
}
extern "C" {
    pub fn pa_context_connect(
        c: *mut pa_context,
        server: *const ::std::os::raw::c_char,
        flags: pa_context_flags_t,
        api: *const pa_spawn_api,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_context_disconnect(c: *mut pa_context);
}
extern "C" {
    pub fn pa_context_drain(
        c: *mut pa_context,
        cb: pa_context_notify_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_exit_daemon(
        c: *mut pa_context,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_set_default_sink(
        c: *mut pa_context,
        name: *const ::std::os::raw::c_char,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_set_default_source(
        c: *mut pa_context,
        name: *const ::std::os::raw::c_char,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_is_local(c: *const pa_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_context_set_name(
        c: *mut pa_context,
        name: *const ::std::os::raw::c_char,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_get_server(c: *const pa_context) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_context_get_protocol_version(c: *const pa_context) -> u32;
}
extern "C" {
    pub fn pa_context_get_server_protocol_version(c: *const pa_context) -> u32;
}
extern "C" {
    pub fn pa_context_proplist_update(
        c: *mut pa_context,
        mode: pa_update_mode_t,
        p: *const pa_proplist,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_proplist_remove(
        c: *mut pa_context,
        keys: *const *const ::std::os::raw::c_char,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_get_index(s: *const pa_context) -> u32;
}
extern "C" {
    pub fn pa_context_rttime_new(
        c: *const pa_context,
        usec: pa_usec_t,
        cb: pa_time_event_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_time_event;
}
extern "C" {
    pub fn pa_context_rttime_restart(c: *const pa_context, e: *mut pa_time_event, usec: pa_usec_t);
}
extern "C" {
    pub fn pa_context_get_tile_size(c: *const pa_context, ss: *const pa_sample_spec) -> usize;
}
extern "C" {
    pub fn pa_context_load_cookie_from_file(
        c: *mut pa_context,
        cookie_file_path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type pa_volume_t = u32;
#[repr(C)]
pub struct pa_cvolume {
    pub channels: u8,
    pub values: [pa_volume_t; 32usize],
}
extern "C" {
    pub fn pa_cvolume_equal(a: *const pa_cvolume, b: *const pa_cvolume) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_cvolume_init(a: *mut pa_cvolume) -> *mut pa_cvolume;
}
extern "C" {
    pub fn pa_cvolume_set(
        a: *mut pa_cvolume,
        channels: ::std::os::raw::c_uint,
        v: pa_volume_t,
    ) -> *mut pa_cvolume;
}
extern "C" {
    pub fn pa_cvolume_snprint(
        s: *mut ::std::os::raw::c_char,
        l: usize,
        c: *const pa_cvolume,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_sw_cvolume_snprint_dB(
        s: *mut ::std::os::raw::c_char,
        l: usize,
        c: *const pa_cvolume,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_cvolume_snprint_verbose(
        s: *mut ::std::os::raw::c_char,
        l: usize,
        c: *const pa_cvolume,
        map: *const pa_channel_map,
        print_dB: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_volume_snprint(
        s: *mut ::std::os::raw::c_char,
        l: usize,
        v: pa_volume_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_sw_volume_snprint_dB(
        s: *mut ::std::os::raw::c_char,
        l: usize,
        v: pa_volume_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_volume_snprint_verbose(
        s: *mut ::std::os::raw::c_char,
        l: usize,
        v: pa_volume_t,
        print_dB: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_cvolume_avg(a: *const pa_cvolume) -> pa_volume_t;
}
extern "C" {
    pub fn pa_cvolume_avg_mask(
        a: *const pa_cvolume,
        cm: *const pa_channel_map,
        mask: pa_channel_position_mask_t,
    ) -> pa_volume_t;
}
extern "C" {
    pub fn pa_cvolume_max(a: *const pa_cvolume) -> pa_volume_t;
}
extern "C" {
    pub fn pa_cvolume_max_mask(
        a: *const pa_cvolume,
        cm: *const pa_channel_map,
        mask: pa_channel_position_mask_t,
    ) -> pa_volume_t;
}
extern "C" {
    pub fn pa_cvolume_min(a: *const pa_cvolume) -> pa_volume_t;
}
extern "C" {
    pub fn pa_cvolume_min_mask(
        a: *const pa_cvolume,
        cm: *const pa_channel_map,
        mask: pa_channel_position_mask_t,
    ) -> pa_volume_t;
}
extern "C" {
    pub fn pa_cvolume_valid(v: *const pa_cvolume) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_cvolume_channels_equal_to(
        a: *const pa_cvolume,
        v: pa_volume_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_sw_volume_multiply(a: pa_volume_t, b: pa_volume_t) -> pa_volume_t;
}
extern "C" {
    pub fn pa_sw_cvolume_multiply(
        dest: *mut pa_cvolume,
        a: *const pa_cvolume,
        b: *const pa_cvolume,
    ) -> *mut pa_cvolume;
}
extern "C" {
    pub fn pa_sw_cvolume_multiply_scalar(
        dest: *mut pa_cvolume,
        a: *const pa_cvolume,
        b: pa_volume_t,
    ) -> *mut pa_cvolume;
}
extern "C" {
    pub fn pa_sw_volume_divide(a: pa_volume_t, b: pa_volume_t) -> pa_volume_t;
}
extern "C" {
    pub fn pa_sw_cvolume_divide(
        dest: *mut pa_cvolume,
        a: *const pa_cvolume,
        b: *const pa_cvolume,
    ) -> *mut pa_cvolume;
}
extern "C" {
    pub fn pa_sw_cvolume_divide_scalar(
        dest: *mut pa_cvolume,
        a: *const pa_cvolume,
        b: pa_volume_t,
    ) -> *mut pa_cvolume;
}
extern "C" {
    pub fn pa_sw_volume_from_dB(f: f64) -> pa_volume_t;
}
extern "C" {
    pub fn pa_sw_volume_to_dB(v: pa_volume_t) -> f64;
}
extern "C" {
    pub fn pa_sw_volume_from_linear(v: f64) -> pa_volume_t;
}
extern "C" {
    pub fn pa_sw_volume_to_linear(v: pa_volume_t) -> f64;
}
extern "C" {
    pub fn pa_cvolume_remap(
        v: *mut pa_cvolume,
        from: *const pa_channel_map,
        to: *const pa_channel_map,
    ) -> *mut pa_cvolume;
}
extern "C" {
    pub fn pa_cvolume_compatible(
        v: *const pa_cvolume,
        ss: *const pa_sample_spec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_cvolume_compatible_with_channel_map(
        v: *const pa_cvolume,
        cm: *const pa_channel_map,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_cvolume_get_balance(v: *const pa_cvolume, map: *const pa_channel_map) -> f32;
}
extern "C" {
    pub fn pa_cvolume_set_balance(
        v: *mut pa_cvolume,
        map: *const pa_channel_map,
        new_balance: f32,
    ) -> *mut pa_cvolume;
}
extern "C" {
    pub fn pa_cvolume_get_fade(v: *const pa_cvolume, map: *const pa_channel_map) -> f32;
}
extern "C" {
    pub fn pa_cvolume_set_fade(
        v: *mut pa_cvolume,
        map: *const pa_channel_map,
        new_fade: f32,
    ) -> *mut pa_cvolume;
}
extern "C" {
    pub fn pa_cvolume_get_lfe_balance(v: *const pa_cvolume, map: *const pa_channel_map) -> f32;
}
extern "C" {
    pub fn pa_cvolume_set_lfe_balance(
        v: *mut pa_cvolume,
        map: *const pa_channel_map,
        new_balance: f32,
    ) -> *mut pa_cvolume;
}
extern "C" {
    pub fn pa_cvolume_scale(v: *mut pa_cvolume, max: pa_volume_t) -> *mut pa_cvolume;
}
extern "C" {
    pub fn pa_cvolume_scale_mask(
        v: *mut pa_cvolume,
        max: pa_volume_t,
        cm: *const pa_channel_map,
        mask: pa_channel_position_mask_t,
    ) -> *mut pa_cvolume;
}
extern "C" {
    pub fn pa_cvolume_set_position(
        cv: *mut pa_cvolume,
        map: *const pa_channel_map,
        t: pa_channel_position_t,
        v: pa_volume_t,
    ) -> *mut pa_cvolume;
}
extern "C" {
    pub fn pa_cvolume_get_position(
        cv: *const pa_cvolume,
        map: *const pa_channel_map,
        t: pa_channel_position_t,
    ) -> pa_volume_t;
}
extern "C" {
    pub fn pa_cvolume_merge(
        dest: *mut pa_cvolume,
        a: *const pa_cvolume,
        b: *const pa_cvolume,
    ) -> *mut pa_cvolume;
}
extern "C" {
    pub fn pa_cvolume_inc_clamp(
        v: *mut pa_cvolume,
        inc: pa_volume_t,
        limit: pa_volume_t,
    ) -> *mut pa_cvolume;
}
extern "C" {
    pub fn pa_cvolume_inc(v: *mut pa_cvolume, inc: pa_volume_t) -> *mut pa_cvolume;
}
extern "C" {
    pub fn pa_cvolume_dec(v: *mut pa_cvolume, dec: pa_volume_t) -> *mut pa_cvolume;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pa_stream {
    _unused: [u8; 0],
}
pub type pa_stream_success_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        s: *mut pa_stream,
        success: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type pa_stream_request_cb_t = ::std::option::Option<
    unsafe extern "C" fn(p: *mut pa_stream, nbytes: usize, userdata: *mut ::std::os::raw::c_void),
>;
pub type pa_stream_notify_cb_t = ::std::option::Option<
    unsafe extern "C" fn(p: *mut pa_stream, userdata: *mut ::std::os::raw::c_void),
>;
pub type pa_stream_event_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        p: *mut pa_stream,
        name: *const ::std::os::raw::c_char,
        pl: *mut pa_proplist,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn pa_stream_new(
        c: *mut pa_context,
        name: *const ::std::os::raw::c_char,
        ss: *const pa_sample_spec,
        map: *const pa_channel_map,
    ) -> *mut pa_stream;
}
extern "C" {
    pub fn pa_stream_new_with_proplist(
        c: *mut pa_context,
        name: *const ::std::os::raw::c_char,
        ss: *const pa_sample_spec,
        map: *const pa_channel_map,
        p: *mut pa_proplist,
    ) -> *mut pa_stream;
}
extern "C" {
    pub fn pa_stream_new_extended(
        c: *mut pa_context,
        name: *const ::std::os::raw::c_char,
        formats: *const *mut pa_format_info,
        n_formats: ::std::os::raw::c_uint,
        p: *mut pa_proplist,
    ) -> *mut pa_stream;
}
extern "C" {
    pub fn pa_stream_unref(s: *mut pa_stream);
}
extern "C" {
    pub fn pa_stream_ref(s: *mut pa_stream) -> *mut pa_stream;
}
extern "C" {
    pub fn pa_stream_get_state(p: *const pa_stream) -> pa_stream_state_t;
}
extern "C" {
    pub fn pa_stream_get_context(p: *const pa_stream) -> *mut pa_context;
}
extern "C" {
    pub fn pa_stream_get_index(s: *const pa_stream) -> u32;
}
extern "C" {
    pub fn pa_stream_get_device_index(s: *const pa_stream) -> u32;
}
extern "C" {
    pub fn pa_stream_get_device_name(s: *const pa_stream) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_stream_is_suspended(s: *const pa_stream) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_stream_is_corked(s: *const pa_stream) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_stream_connect_playback(
        s: *mut pa_stream,
        dev: *const ::std::os::raw::c_char,
        attr: *const pa_buffer_attr,
        flags: pa_stream_flags_t,
        volume: *const pa_cvolume,
        sync_stream: *mut pa_stream,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_stream_connect_record(
        s: *mut pa_stream,
        dev: *const ::std::os::raw::c_char,
        attr: *const pa_buffer_attr,
        flags: pa_stream_flags_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_stream_disconnect(s: *mut pa_stream) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_stream_begin_write(
        p: *mut pa_stream,
        data: *mut *mut ::std::os::raw::c_void,
        nbytes: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_stream_cancel_write(p: *mut pa_stream) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_stream_write(
        p: *mut pa_stream,
        data: *const ::std::os::raw::c_void,
        nbytes: usize,
        free_cb: pa_free_cb_t,
        offset: i64,
        seek: pa_seek_mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_stream_write_ext_free(
        p: *mut pa_stream,
        data: *const ::std::os::raw::c_void,
        nbytes: usize,
        free_cb: pa_free_cb_t,
        free_cb_data: *mut ::std::os::raw::c_void,
        offset: i64,
        seek: pa_seek_mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_stream_peek(
        p: *mut pa_stream,
        data: *mut *const ::std::os::raw::c_void,
        nbytes: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_stream_drop(p: *mut pa_stream) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_stream_writable_size(p: *const pa_stream) -> usize;
}
extern "C" {
    pub fn pa_stream_readable_size(p: *const pa_stream) -> usize;
}
extern "C" {
    pub fn pa_stream_drain(
        s: *mut pa_stream,
        cb: pa_stream_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_stream_update_timing_info(
        p: *mut pa_stream,
        cb: pa_stream_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_stream_set_state_callback(
        s: *mut pa_stream,
        cb: pa_stream_notify_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pa_stream_set_write_callback(
        p: *mut pa_stream,
        cb: pa_stream_request_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pa_stream_set_read_callback(
        p: *mut pa_stream,
        cb: pa_stream_request_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pa_stream_set_overflow_callback(
        p: *mut pa_stream,
        cb: pa_stream_notify_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pa_stream_get_underflow_index(p: *const pa_stream) -> i64;
}
extern "C" {
    pub fn pa_stream_set_underflow_callback(
        p: *mut pa_stream,
        cb: pa_stream_notify_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pa_stream_set_started_callback(
        p: *mut pa_stream,
        cb: pa_stream_notify_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pa_stream_set_latency_update_callback(
        p: *mut pa_stream,
        cb: pa_stream_notify_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pa_stream_set_moved_callback(
        p: *mut pa_stream,
        cb: pa_stream_notify_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pa_stream_set_suspended_callback(
        p: *mut pa_stream,
        cb: pa_stream_notify_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pa_stream_set_event_callback(
        p: *mut pa_stream,
        cb: pa_stream_event_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pa_stream_set_buffer_attr_callback(
        p: *mut pa_stream,
        cb: pa_stream_notify_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn pa_stream_cork(
        s: *mut pa_stream,
        b: ::std::os::raw::c_int,
        cb: pa_stream_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_stream_flush(
        s: *mut pa_stream,
        cb: pa_stream_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_stream_prebuf(
        s: *mut pa_stream,
        cb: pa_stream_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_stream_trigger(
        s: *mut pa_stream,
        cb: pa_stream_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_stream_set_name(
        s: *mut pa_stream,
        name: *const ::std::os::raw::c_char,
        cb: pa_stream_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_stream_get_time(s: *mut pa_stream, r_usec: *mut pa_usec_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_stream_get_latency(
        s: *mut pa_stream,
        r_usec: *mut pa_usec_t,
        negative: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_stream_get_timing_info(s: *mut pa_stream) -> *const pa_timing_info;
}
extern "C" {
    pub fn pa_stream_get_sample_spec(s: *mut pa_stream) -> *const pa_sample_spec;
}
extern "C" {
    pub fn pa_stream_get_channel_map(s: *mut pa_stream) -> *const pa_channel_map;
}
extern "C" {
    pub fn pa_stream_get_format_info(s: *const pa_stream) -> *const pa_format_info;
}
extern "C" {
    pub fn pa_stream_get_buffer_attr(s: *mut pa_stream) -> *const pa_buffer_attr;
}
extern "C" {
    pub fn pa_stream_set_buffer_attr(
        s: *mut pa_stream,
        attr: *const pa_buffer_attr,
        cb: pa_stream_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_stream_update_sample_rate(
        s: *mut pa_stream,
        rate: u32,
        cb: pa_stream_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_stream_proplist_update(
        s: *mut pa_stream,
        mode: pa_update_mode_t,
        p: *mut pa_proplist,
        cb: pa_stream_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_stream_proplist_remove(
        s: *mut pa_stream,
        keys: *const *const ::std::os::raw::c_char,
        cb: pa_stream_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_stream_set_monitor_stream(
        s: *mut pa_stream,
        sink_input_idx: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_stream_get_monitor_stream(s: *const pa_stream) -> u32;
}
#[repr(C)]
pub struct pa_sink_port_info {
    pub name: *const ::std::os::raw::c_char,
    pub description: *const ::std::os::raw::c_char,
    pub priority: u32,
    pub available: ::std::os::raw::c_int,
    pub availability_group: *const ::std::os::raw::c_char,
    pub type_: u32,
}
#[repr(C)]
pub struct pa_sink_info {
    pub name: *const ::std::os::raw::c_char,
    pub index: u32,
    pub description: *const ::std::os::raw::c_char,
    pub sample_spec: pa_sample_spec,
    pub channel_map: pa_channel_map,
    pub owner_module: u32,
    pub volume: pa_cvolume,
    pub mute: ::std::os::raw::c_int,
    pub monitor_source: u32,
    pub monitor_source_name: *const ::std::os::raw::c_char,
    pub latency: pa_usec_t,
    pub driver: *const ::std::os::raw::c_char,
    pub flags: pa_sink_flags_t,
    pub proplist: *mut pa_proplist,
    pub configured_latency: pa_usec_t,
    pub base_volume: pa_volume_t,
    pub state: pa_sink_state_t,
    pub n_volume_steps: u32,
    pub card: u32,
    pub n_ports: u32,
    pub ports: *mut *mut pa_sink_port_info,
    pub active_port: *mut pa_sink_port_info,
    pub n_formats: u8,
    pub formats: *mut *mut pa_format_info,
}
pub type pa_sink_info_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        c: *mut pa_context,
        i: *const pa_sink_info,
        eol: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn pa_context_get_sink_info_by_name(
        c: *mut pa_context,
        name: *const ::std::os::raw::c_char,
        cb: pa_sink_info_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_get_sink_info_by_index(
        c: *mut pa_context,
        idx: u32,
        cb: pa_sink_info_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_get_sink_info_list(
        c: *mut pa_context,
        cb: pa_sink_info_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_set_sink_volume_by_index(
        c: *mut pa_context,
        idx: u32,
        volume: *const pa_cvolume,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_set_sink_volume_by_name(
        c: *mut pa_context,
        name: *const ::std::os::raw::c_char,
        volume: *const pa_cvolume,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_set_sink_mute_by_index(
        c: *mut pa_context,
        idx: u32,
        mute: ::std::os::raw::c_int,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_set_sink_mute_by_name(
        c: *mut pa_context,
        name: *const ::std::os::raw::c_char,
        mute: ::std::os::raw::c_int,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_suspend_sink_by_name(
        c: *mut pa_context,
        sink_name: *const ::std::os::raw::c_char,
        suspend: ::std::os::raw::c_int,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_suspend_sink_by_index(
        c: *mut pa_context,
        idx: u32,
        suspend: ::std::os::raw::c_int,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_set_sink_port_by_index(
        c: *mut pa_context,
        idx: u32,
        port: *const ::std::os::raw::c_char,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_set_sink_port_by_name(
        c: *mut pa_context,
        name: *const ::std::os::raw::c_char,
        port: *const ::std::os::raw::c_char,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
#[repr(C)]
pub struct pa_source_port_info {
    pub name: *const ::std::os::raw::c_char,
    pub description: *const ::std::os::raw::c_char,
    pub priority: u32,
    pub available: ::std::os::raw::c_int,
    pub availability_group: *const ::std::os::raw::c_char,
    pub type_: u32,
}
#[repr(C)]
pub struct pa_source_info {
    pub name: *const ::std::os::raw::c_char,
    pub index: u32,
    pub description: *const ::std::os::raw::c_char,
    pub sample_spec: pa_sample_spec,
    pub channel_map: pa_channel_map,
    pub owner_module: u32,
    pub volume: pa_cvolume,
    pub mute: ::std::os::raw::c_int,
    pub monitor_of_sink: u32,
    pub monitor_of_sink_name: *const ::std::os::raw::c_char,
    pub latency: pa_usec_t,
    pub driver: *const ::std::os::raw::c_char,
    pub flags: pa_source_flags_t,
    pub proplist: *mut pa_proplist,
    pub configured_latency: pa_usec_t,
    pub base_volume: pa_volume_t,
    pub state: pa_source_state_t,
    pub n_volume_steps: u32,
    pub card: u32,
    pub n_ports: u32,
    pub ports: *mut *mut pa_source_port_info,
    pub active_port: *mut pa_source_port_info,
    pub n_formats: u8,
    pub formats: *mut *mut pa_format_info,
}
pub type pa_source_info_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        c: *mut pa_context,
        i: *const pa_source_info,
        eol: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn pa_context_get_source_info_by_name(
        c: *mut pa_context,
        name: *const ::std::os::raw::c_char,
        cb: pa_source_info_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_get_source_info_by_index(
        c: *mut pa_context,
        idx: u32,
        cb: pa_source_info_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_get_source_info_list(
        c: *mut pa_context,
        cb: pa_source_info_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_set_source_volume_by_index(
        c: *mut pa_context,
        idx: u32,
        volume: *const pa_cvolume,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_set_source_volume_by_name(
        c: *mut pa_context,
        name: *const ::std::os::raw::c_char,
        volume: *const pa_cvolume,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_set_source_mute_by_index(
        c: *mut pa_context,
        idx: u32,
        mute: ::std::os::raw::c_int,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_set_source_mute_by_name(
        c: *mut pa_context,
        name: *const ::std::os::raw::c_char,
        mute: ::std::os::raw::c_int,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_suspend_source_by_name(
        c: *mut pa_context,
        source_name: *const ::std::os::raw::c_char,
        suspend: ::std::os::raw::c_int,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_suspend_source_by_index(
        c: *mut pa_context,
        idx: u32,
        suspend: ::std::os::raw::c_int,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_set_source_port_by_index(
        c: *mut pa_context,
        idx: u32,
        port: *const ::std::os::raw::c_char,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_set_source_port_by_name(
        c: *mut pa_context,
        name: *const ::std::os::raw::c_char,
        port: *const ::std::os::raw::c_char,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
#[repr(C)]
pub struct pa_server_info {
    pub user_name: *const ::std::os::raw::c_char,
    pub host_name: *const ::std::os::raw::c_char,
    pub server_version: *const ::std::os::raw::c_char,
    pub server_name: *const ::std::os::raw::c_char,
    pub sample_spec: pa_sample_spec,
    pub default_sink_name: *const ::std::os::raw::c_char,
    pub default_source_name: *const ::std::os::raw::c_char,
    pub cookie: u32,
    pub channel_map: pa_channel_map,
}
pub type pa_server_info_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        c: *mut pa_context,
        i: *const pa_server_info,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn pa_context_get_server_info(
        c: *mut pa_context,
        cb: pa_server_info_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
#[repr(C)]
pub struct pa_module_info {
    pub index: u32,
    pub name: *const ::std::os::raw::c_char,
    pub argument: *const ::std::os::raw::c_char,
    pub n_used: u32,
    pub auto_unload: ::std::os::raw::c_int,
    pub proplist: *mut pa_proplist,
}
pub type pa_module_info_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        c: *mut pa_context,
        i: *const pa_module_info,
        eol: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn pa_context_get_module_info(
        c: *mut pa_context,
        idx: u32,
        cb: pa_module_info_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_get_module_info_list(
        c: *mut pa_context,
        cb: pa_module_info_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
pub type pa_context_index_cb_t = ::std::option::Option<
    unsafe extern "C" fn(c: *mut pa_context, idx: u32, userdata: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn pa_context_load_module(
        c: *mut pa_context,
        name: *const ::std::os::raw::c_char,
        argument: *const ::std::os::raw::c_char,
        cb: pa_context_index_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_unload_module(
        c: *mut pa_context,
        idx: u32,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
#[repr(C)]
pub struct pa_client_info {
    pub index: u32,
    pub name: *const ::std::os::raw::c_char,
    pub owner_module: u32,
    pub driver: *const ::std::os::raw::c_char,
    pub proplist: *mut pa_proplist,
}
pub type pa_client_info_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        c: *mut pa_context,
        i: *const pa_client_info,
        eol: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn pa_context_get_client_info(
        c: *mut pa_context,
        idx: u32,
        cb: pa_client_info_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_get_client_info_list(
        c: *mut pa_context,
        cb: pa_client_info_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_kill_client(
        c: *mut pa_context,
        idx: u32,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
#[repr(C)]
pub struct pa_card_profile_info {
    pub name: *const ::std::os::raw::c_char,
    pub description: *const ::std::os::raw::c_char,
    pub n_sinks: u32,
    pub n_sources: u32,
    pub priority: u32,
}
#[repr(C)]
pub struct pa_card_profile_info2 {
    pub name: *const ::std::os::raw::c_char,
    pub description: *const ::std::os::raw::c_char,
    pub n_sinks: u32,
    pub n_sources: u32,
    pub priority: u32,
    pub available: ::std::os::raw::c_int,
}
#[repr(C)]
pub struct pa_card_port_info {
    pub name: *const ::std::os::raw::c_char,
    pub description: *const ::std::os::raw::c_char,
    pub priority: u32,
    pub available: ::std::os::raw::c_int,
    pub direction: ::std::os::raw::c_int,
    pub n_profiles: u32,
    pub profiles: *mut *mut pa_card_profile_info,
    pub proplist: *mut pa_proplist,
    pub latency_offset: i64,
    pub profiles2: *mut *mut pa_card_profile_info2,
    pub availability_group: *const ::std::os::raw::c_char,
    pub type_: u32,
}
#[repr(C)]
pub struct pa_card_info {
    pub index: u32,
    pub name: *const ::std::os::raw::c_char,
    pub owner_module: u32,
    pub driver: *const ::std::os::raw::c_char,
    pub n_profiles: u32,
    pub profiles: *mut pa_card_profile_info,
    pub active_profile: *mut pa_card_profile_info,
    pub proplist: *mut pa_proplist,
    pub n_ports: u32,
    pub ports: *mut *mut pa_card_port_info,
    pub profiles2: *mut *mut pa_card_profile_info2,
    pub active_profile2: *mut pa_card_profile_info2,
}
pub type pa_card_info_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        c: *mut pa_context,
        i: *const pa_card_info,
        eol: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn pa_context_get_card_info_by_index(
        c: *mut pa_context,
        idx: u32,
        cb: pa_card_info_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_get_card_info_by_name(
        c: *mut pa_context,
        name: *const ::std::os::raw::c_char,
        cb: pa_card_info_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_get_card_info_list(
        c: *mut pa_context,
        cb: pa_card_info_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_set_card_profile_by_index(
        c: *mut pa_context,
        idx: u32,
        profile: *const ::std::os::raw::c_char,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_set_card_profile_by_name(
        c: *mut pa_context,
        name: *const ::std::os::raw::c_char,
        profile: *const ::std::os::raw::c_char,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_set_port_latency_offset(
        c: *mut pa_context,
        card_name: *const ::std::os::raw::c_char,
        port_name: *const ::std::os::raw::c_char,
        offset: i64,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
#[repr(C)]
pub struct pa_sink_input_info {
    pub index: u32,
    pub name: *const ::std::os::raw::c_char,
    pub owner_module: u32,
    pub client: u32,
    pub sink: u32,
    pub sample_spec: pa_sample_spec,
    pub channel_map: pa_channel_map,
    pub volume: pa_cvolume,
    pub buffer_usec: pa_usec_t,
    pub sink_usec: pa_usec_t,
    pub resample_method: *const ::std::os::raw::c_char,
    pub driver: *const ::std::os::raw::c_char,
    pub mute: ::std::os::raw::c_int,
    pub proplist: *mut pa_proplist,
    pub corked: ::std::os::raw::c_int,
    pub has_volume: ::std::os::raw::c_int,
    pub volume_writable: ::std::os::raw::c_int,
    pub format: *mut pa_format_info,
}
pub type pa_sink_input_info_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        c: *mut pa_context,
        i: *const pa_sink_input_info,
        eol: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn pa_context_get_sink_input_info(
        c: *mut pa_context,
        idx: u32,
        cb: pa_sink_input_info_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_get_sink_input_info_list(
        c: *mut pa_context,
        cb: pa_sink_input_info_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_move_sink_input_by_name(
        c: *mut pa_context,
        idx: u32,
        sink_name: *const ::std::os::raw::c_char,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_move_sink_input_by_index(
        c: *mut pa_context,
        idx: u32,
        sink_idx: u32,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_set_sink_input_volume(
        c: *mut pa_context,
        idx: u32,
        volume: *const pa_cvolume,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_set_sink_input_mute(
        c: *mut pa_context,
        idx: u32,
        mute: ::std::os::raw::c_int,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_kill_sink_input(
        c: *mut pa_context,
        idx: u32,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
#[repr(C)]
pub struct pa_source_output_info {
    pub index: u32,
    pub name: *const ::std::os::raw::c_char,
    pub owner_module: u32,
    pub client: u32,
    pub source: u32,
    pub sample_spec: pa_sample_spec,
    pub channel_map: pa_channel_map,
    pub buffer_usec: pa_usec_t,
    pub source_usec: pa_usec_t,
    pub resample_method: *const ::std::os::raw::c_char,
    pub driver: *const ::std::os::raw::c_char,
    pub proplist: *mut pa_proplist,
    pub corked: ::std::os::raw::c_int,
    pub volume: pa_cvolume,
    pub mute: ::std::os::raw::c_int,
    pub has_volume: ::std::os::raw::c_int,
    pub volume_writable: ::std::os::raw::c_int,
    pub format: *mut pa_format_info,
}
pub type pa_source_output_info_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        c: *mut pa_context,
        i: *const pa_source_output_info,
        eol: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn pa_context_get_source_output_info(
        c: *mut pa_context,
        idx: u32,
        cb: pa_source_output_info_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_get_source_output_info_list(
        c: *mut pa_context,
        cb: pa_source_output_info_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_move_source_output_by_name(
        c: *mut pa_context,
        idx: u32,
        source_name: *const ::std::os::raw::c_char,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_move_source_output_by_index(
        c: *mut pa_context,
        idx: u32,
        source_idx: u32,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_set_source_output_volume(
        c: *mut pa_context,
        idx: u32,
        volume: *const pa_cvolume,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_set_source_output_mute(
        c: *mut pa_context,
        idx: u32,
        mute: ::std::os::raw::c_int,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_kill_source_output(
        c: *mut pa_context,
        idx: u32,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
#[repr(C)]
pub struct pa_stat_info {
    pub memblock_total: u32,
    pub memblock_total_size: u32,
    pub memblock_allocated: u32,
    pub memblock_allocated_size: u32,
    pub scache_size: u32,
}
pub type pa_stat_info_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        c: *mut pa_context,
        i: *const pa_stat_info,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn pa_context_stat(
        c: *mut pa_context,
        cb: pa_stat_info_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
#[repr(C)]
pub struct pa_sample_info {
    pub index: u32,
    pub name: *const ::std::os::raw::c_char,
    pub volume: pa_cvolume,
    pub sample_spec: pa_sample_spec,
    pub channel_map: pa_channel_map,
    pub duration: pa_usec_t,
    pub bytes: u32,
    pub lazy: ::std::os::raw::c_int,
    pub filename: *const ::std::os::raw::c_char,
    pub proplist: *mut pa_proplist,
}
pub type pa_sample_info_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        c: *mut pa_context,
        i: *const pa_sample_info,
        eol: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn pa_context_get_sample_info_by_name(
        c: *mut pa_context,
        name: *const ::std::os::raw::c_char,
        cb: pa_sample_info_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_get_sample_info_by_index(
        c: *mut pa_context,
        idx: u32,
        cb: pa_sample_info_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_get_sample_info_list(
        c: *mut pa_context,
        cb: pa_sample_info_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
pub const PA_AUTOLOAD_SINK: pa_autoload_type = 0;
pub const PA_AUTOLOAD_SOURCE: pa_autoload_type = 1;
pub type pa_autoload_type = ::std::os::raw::c_uint;
pub use self::pa_autoload_type as pa_autoload_type_t;
#[repr(C)]
pub struct pa_autoload_info {
    pub index: u32,
    pub name: *const ::std::os::raw::c_char,
    pub type_: pa_autoload_type_t,
    pub module: *const ::std::os::raw::c_char,
    pub argument: *const ::std::os::raw::c_char,
}
pub type pa_autoload_info_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        c: *mut pa_context,
        i: *const pa_autoload_info,
        eol: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn pa_context_get_autoload_info_by_name(
        c: *mut pa_context,
        name: *const ::std::os::raw::c_char,
        type_: pa_autoload_type_t,
        cb: pa_autoload_info_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_get_autoload_info_by_index(
        c: *mut pa_context,
        idx: u32,
        cb: pa_autoload_info_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_get_autoload_info_list(
        c: *mut pa_context,
        cb: pa_autoload_info_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_add_autoload(
        c: *mut pa_context,
        name: *const ::std::os::raw::c_char,
        type_: pa_autoload_type_t,
        module: *const ::std::os::raw::c_char,
        argument: *const ::std::os::raw::c_char,
        arg1: pa_context_index_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_remove_autoload_by_name(
        c: *mut pa_context,
        name: *const ::std::os::raw::c_char,
        type_: pa_autoload_type_t,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_remove_autoload_by_index(
        c: *mut pa_context,
        idx: u32,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
pub type pa_context_subscribe_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        c: *mut pa_context,
        t: pa_subscription_event_type_t,
        idx: u32,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn pa_context_subscribe(
        c: *mut pa_context,
        m: pa_subscription_mask_t,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_set_subscribe_callback(
        c: *mut pa_context,
        cb: pa_context_subscribe_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    );
}
pub type pa_context_play_sample_cb_t = ::std::option::Option<
    unsafe extern "C" fn(c: *mut pa_context, idx: u32, userdata: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn pa_stream_connect_upload(s: *mut pa_stream, length: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_stream_finish_upload(s: *mut pa_stream) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_context_remove_sample(
        c: *mut pa_context,
        name: *const ::std::os::raw::c_char,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_play_sample(
        c: *mut pa_context,
        name: *const ::std::os::raw::c_char,
        dev: *const ::std::os::raw::c_char,
        volume: pa_volume_t,
        cb: pa_context_success_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_context_play_sample_with_proplist(
        c: *mut pa_context,
        name: *const ::std::os::raw::c_char,
        dev: *const ::std::os::raw::c_char,
        volume: pa_volume_t,
        proplist: *const pa_proplist,
        cb: pa_context_play_sample_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_operation;
}
extern "C" {
    pub fn pa_strerror(error: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_xmalloc(l: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pa_xmalloc0(l: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pa_xrealloc(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pa_xfree(p: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn pa_xstrdup(s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_xstrndup(s: *const ::std::os::raw::c_char, l: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_xmemdup(p: *const ::std::os::raw::c_void, l: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pa_utf8_valid(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_ascii_valid(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_utf8_filter(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_ascii_filter(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_utf8_to_locale(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_locale_to_utf8(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pa_threaded_mainloop {
    _unused: [u8; 0],
}
extern "C" {
    pub fn pa_threaded_mainloop_new() -> *mut pa_threaded_mainloop;
}
extern "C" {
    pub fn pa_threaded_mainloop_free(m: *mut pa_threaded_mainloop);
}
extern "C" {
    pub fn pa_threaded_mainloop_start(m: *mut pa_threaded_mainloop) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_threaded_mainloop_stop(m: *mut pa_threaded_mainloop);
}
extern "C" {
    pub fn pa_threaded_mainloop_lock(m: *mut pa_threaded_mainloop);
}
extern "C" {
    pub fn pa_threaded_mainloop_unlock(m: *mut pa_threaded_mainloop);
}
extern "C" {
    pub fn pa_threaded_mainloop_wait(m: *mut pa_threaded_mainloop);
}
extern "C" {
    pub fn pa_threaded_mainloop_signal(
        m: *mut pa_threaded_mainloop,
        wait_for_accept: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pa_threaded_mainloop_accept(m: *mut pa_threaded_mainloop);
}
extern "C" {
    pub fn pa_threaded_mainloop_get_retval(m: *const pa_threaded_mainloop)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_threaded_mainloop_get_api(m: *mut pa_threaded_mainloop) -> *mut pa_mainloop_api;
}
extern "C" {
    pub fn pa_threaded_mainloop_in_thread(m: *mut pa_threaded_mainloop) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_threaded_mainloop_set_name(
        m: *mut pa_threaded_mainloop,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn pa_threaded_mainloop_once_unlocked(
        m: *mut pa_threaded_mainloop,
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                m: *mut pa_threaded_mainloop,
                userdata: *mut ::std::os::raw::c_void,
            ),
        >,
        userdata: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pa_mainloop {
    _unused: [u8; 0],
}
extern "C" {
    pub fn pa_mainloop_new() -> *mut pa_mainloop;
}
extern "C" {
    pub fn pa_mainloop_free(m: *mut pa_mainloop);
}
extern "C" {
    pub fn pa_mainloop_prepare(
        m: *mut pa_mainloop,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_mainloop_poll(m: *mut pa_mainloop) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_mainloop_dispatch(m: *mut pa_mainloop) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_mainloop_get_retval(m: *const pa_mainloop) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_mainloop_iterate(
        m: *mut pa_mainloop,
        block: ::std::os::raw::c_int,
        retval: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_mainloop_run(
        m: *mut pa_mainloop,
        retval: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_mainloop_get_api(m: *mut pa_mainloop) -> *mut pa_mainloop_api;
}
extern "C" {
    pub fn pa_mainloop_quit(m: *mut pa_mainloop, retval: ::std::os::raw::c_int);
}
extern "C" {
    pub fn pa_mainloop_wakeup(m: *mut pa_mainloop);
}
pub type pa_poll_func = ::std::option::Option<
    unsafe extern "C" fn(
        ufds: *mut pollfd,
        nfds: ::std::os::raw::c_ulong,
        timeout: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn pa_mainloop_set_poll_func(
        m: *mut pa_mainloop,
        poll_func: pa_poll_func,
        userdata: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pa_signal_event {
    _unused: [u8; 0],
}
pub type pa_signal_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        api: *mut pa_mainloop_api,
        e: *mut pa_signal_event,
        sig: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type pa_signal_destroy_cb_t = ::std::option::Option<
    unsafe extern "C" fn(
        api: *mut pa_mainloop_api,
        e: *mut pa_signal_event,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn pa_signal_init(api: *mut pa_mainloop_api) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_signal_done();
}
extern "C" {
    pub fn pa_signal_new(
        sig: ::std::os::raw::c_int,
        callback: pa_signal_cb_t,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut pa_signal_event;
}
extern "C" {
    pub fn pa_signal_free(e: *mut pa_signal_event);
}
extern "C" {
    pub fn pa_signal_set_destroy(e: *mut pa_signal_event, callback: pa_signal_destroy_cb_t);
}
extern "C" {
    pub fn pa_get_user_name(
        s: *mut ::std::os::raw::c_char,
        l: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_get_host_name(
        s: *mut ::std::os::raw::c_char,
        l: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_get_fqdn(s: *mut ::std::os::raw::c_char, l: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_get_home_dir(s: *mut ::std::os::raw::c_char, l: usize)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_get_binary_name(
        s: *mut ::std::os::raw::c_char,
        l: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_path_get_filename(p: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pa_msleep(t: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_thread_make_realtime(rtprio: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_gettimeofday(tv: *mut timeval) -> *mut timeval;
}
extern "C" {
    pub fn pa_timeval_diff(a: *const timeval, b: *const timeval) -> pa_usec_t;
}
extern "C" {
    pub fn pa_timeval_cmp(a: *const timeval, b: *const timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pa_timeval_age(tv: *const timeval) -> pa_usec_t;
}
extern "C" {
    pub fn pa_timeval_add(tv: *mut timeval, v: pa_usec_t) -> *mut timeval;
}
extern "C" {
    pub fn pa_timeval_sub(tv: *mut timeval, v: pa_usec_t) -> *mut timeval;
}
extern "C" {
    pub fn pa_timeval_store(tv: *mut timeval, v: pa_usec_t) -> *mut timeval;
}
extern "C" {
    pub fn pa_timeval_load(tv: *const timeval) -> pa_usec_t;
}
extern "C" {
    pub fn pa_rtclock_now() -> pa_usec_t;
}
